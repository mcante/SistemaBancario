CREATE OR REPLACE PROCEDURE DEBITO_AHORRO
(MONTO IN FLOAT,   CTA_OR IN VARCHAR2,IN_LIBRETA IN NUMBER)
IS 
V_VALIDA_CUENTA NUMBER;
V_SALDO_CUENTA CUENTA.SALDO_DISPONIBLE%TYPE;
V_BLOQUEADA CUENTA.STATUS%TYPE;
V_DIFERENCIA CUENTA.SALDO_DISPONIBLE%TYPE;
V_TIPO_CUENTA CUENTA.ID_PRODUCTO%TYPE;
V_LIBRETA NUMBER;
V_LIBRETA2 NUMBER;
V_STAT_LIBRETA CHEQUE.ESTADO%TYPE;
V_LIB_FEC_VEN DATE;

BEGIN

IF(MONTO>0) THEN
--VALIDACION SI CUENTA EXISTE Y NO ESTA BLOQUEADA
	SELECT COUNT(NO_CUENTA) INTO V_VALIDA_CUENTA FROM CUENTA WHERE NO_CUENTA=CTA_OR;
	SELECT STATUS INTO V_BLOQUEADA FROM CUENTA WHERE NO_CUENTA=CTA_OR;
	IF(V_VALIDA_CUENTA=1 and V_BLOQUEADA='ACTIVO') THEN
	--VALIDACION SI ES CUENTA MONETARIA
		SELECT ID_PRODUCTO INTO V_TIPO_CUENTA FROM CUENTA WHERE NO_CUENTA=CTA_OR; --TIPO DE CUENTA ORIGEN
		IF(V_TIPO_CUENTA=1) THEN
			--VALIDACION DE SALDO
			SELECT SALDO_DISPONIBLE INTO V_SALDO_CUENTA FROM CUENTA WHERE NO_CUENTA=CTA_OR;
			V_DIFERENCIA:=V_SALDO_CUENTA-MONTO;
			IF(V_DIFERENCIA>=100)THEN
					SELECT COUNT(NO_LIBRETA) INTO V_LIBRETA FROM LIBRETA WHERE NO_CUENTA=CTA_OR;
					SELECT NO_LIBRETA INTO V_LIBRETA2 FROM LIBRETA WHERE NO_CUENTA=CTA_OR;
					SELECT ESTADO INTO V_STAT_LIBRETA FROM LIBRETA WHERE NO_CUENTA=CTA_OR;
					SELECT FECHA_VENCIMIENTO INTO V_LIB_FEC_VEN FROM LIBRETA WHERE NO_CUENTA=CTA_OR;
					IF (V_LIBRETA=1 AND V_STAT_LIBRETA='ACTIVA' AND V_LIBRETA2=IN_LIBRETA AND V_LIB_FEC_VEN>SYSDATE) THEN
						UPDATE CUENTA SET SALDO_DISPONIBLE=V_SALDO_CUENTA-MONTO, FECHA_ULTIMA_TRANSACCION=SYSDATE WHERE NO_CUENTA=CTA_OR;
						INSERT INTO OPERACION (FECHA_HORA, NO_CUENTA_ORIGEN,TIPO_OPERACION, TIPO_DOCUMENTO, NO_DOCUMENTO, STATUS, SALDO_INICIAL_ORIGEN,SALDO_FINAL_ORIGEN,MONTO_TOTAL_OPERADO,ID_CAJERO)
						VALUES (SYSDATE,CTA_OR,'RETIRO CON LIBRETA','BOLETA',BOLETA.NEXTVAL,'CORRECTO',V_SALDO_CUENTA,V_DIFERENCIA,MONTO,1);
						COMMIT;
						DBMS_OUTPUT.put_line('RETIRO REALIZADO CORRECTAMENTE');
						ElSE
						DBMS_OUTPUT.put_line('LA LIBRETA NO EXISTE O NO SE ENCUENTRA ACTIVA');
						DBMS_OUTPUT.put_line('O NO PERTENECE A LA CUENTA INGRESADA O YA VENCIO');
						ROLLBACK;
					END IF;			
			ElSE 
				DBMS_OUTPUT.PUT_LINE('EL SALDO ACTUAL DE LA CUENTA DE AHORRO ES DE: Q.'||V_SALDO_CUENTA);
    	        DBMS_OUTPUT.PUT_LINE('EL SALDO MINIMO RESTANTE NO PUEDE SER MENOR A Q100.00');
				ROLLBACK;
			END IF;
		ElSE
		DBMS_OUTPUT.put_line('LA CUENTA DEBE SER DE AHORRO, FAVOR VALIDAR LOS DATOS');
		ROLLBACK;
		END IF;
	ElSE
	DBMS_OUTPUT.put_line('LA CUENTA NO EXISTE O NO ESTA ACTIVA');
	ROLLBACK;
	END IF;
ElSE
DBMS_OUTPUT.PUT_LINE('EL MONTO A RETIRAR NO PUEDE SER CERO');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS, POR FAVOR VALIDE LOS DATOS');
END DEBITO_AHORRO;

--PRUEBAS
EXECUTE DEBITO_AHORRO(100,'2-001-0000001-9',100);
EXECUTE DEBITO_AHORRO(100,'2-001-0000001-9',1);
EXECUTE DEBITO_AHORRO(100,'1-002-0000001-8',2);
EXECUTE DEBITO_AHORRO(0,'1-002-0000001-8',1);
EXECUTE DEBITO_AHORRO(100,'1-002-0000001-8',1);